{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","routes/Detail.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["About","className","Movie","id","year","title","summary","poster","genres","bg_poster","runtime","rating","to","pathname","state","style","textDecoration","src","alt","map","genre","index","key","slice","prototypes","PropTypes","number","isRequired","string","arrayOf","Home","isLoading","movies","getMovies","a","axios","get","setState","data","this","movie","medium_cover_image","background_image","React","Component","Detail","props","location","history","undefined","push","comp","Navigation","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8UAYeA,MARf,WACE,OACE,yBAAKC,UAAU,6CACb,yBAAKA,UAAU,0BAAf,uB,gGCFN,SAASC,EAAT,GAUI,IATFC,EASC,EATDA,GACAC,EAQC,EARDA,KACAC,EAOC,EAPDA,MACAC,EAMC,EANDA,QACAC,EAKC,EALDA,OACAC,EAIC,EAJDA,OACAC,EAGC,EAHDA,UACAC,EAEC,EAFDA,QACAC,EACC,EADDA,OAEA,OACE,kBAAC,IAAD,CACEC,GAAI,CACFC,SAAU,gBACVC,MAAO,CACLX,KACAC,OACAC,QACAC,UACAC,SACAC,SACAC,YACAC,UACAC,WAGJI,MAAO,CAAEC,eAAgB,SAEzB,yBAAKf,UAAU,SACb,yBAAKgB,IAAKV,EAAQW,IAAKb,EAAOA,MAAOA,IACrC,yBAAKJ,UAAU,eACb,wBAAIA,UAAU,gBAAgBI,GAC9B,wBAAIJ,UAAU,eAAeG,GAC7B,wBAAIH,UAAU,UACXO,EAAOW,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,EAAOpB,UAAU,iBACvBmB,OAIP,uBAAGnB,UAAU,kBAAkBK,EAAQiB,MAAM,EAAG,KAAhD,UAOVrB,EAAMsB,WAAa,CACjBrB,GAAIsB,IAAUC,OAAOC,WACrBvB,KAAMqB,IAAUC,OAAOC,WACvBtB,MAAOoB,IAAUG,OAAOD,WACxBrB,QAASmB,IAAUG,OAAOD,WAC1BpB,OAAQkB,IAAUG,OAAOD,WACzBnB,OAAQiB,IAAUI,QAAQJ,IAAUG,QAAQD,YAG/BzB,QCRA4B,G,kNAhDbhB,MAAQ,CACNiB,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,4BAAAC,EAAA,sEACWC,IAAMC,IACzB,yDAFQ,OACJJ,EADI,OAIV,EAAKK,SAAS,CAAEL,OAAQA,EAAOM,KAAKA,KAAKN,OAAQD,WAAW,IAJlD,2C,kEAQVQ,KAAKN,c,+BAEG,IAAD,EACuBM,KAAKzB,MAA3BiB,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,6BAAS/B,UAAU,uBAChB8B,EACC,yBAAK9B,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZ+B,EAAOb,KAAI,SAACqB,GACX,OACE,kBAAC,EAAD,CACElB,IAAKkB,EAAMrC,GACXA,GAAIqC,EAAMrC,GACVC,KAAMoC,EAAMpC,KACZC,MAAOmC,EAAMnC,MACbC,QAASkC,EAAMlC,QACfC,OAAQiC,EAAMC,mBACdjC,OAAQgC,EAAMhC,OACdC,UAAW+B,EAAME,iBACjBhC,QAAS8B,EAAM9B,QACfC,OAAQ6B,EAAM7B,kB,GAtCbgC,IAAMC,YC4CVC,E,kLA9CQ,IAAD,EACYN,KAAKO,MAA3BC,EADU,EACVA,SAAUC,EADA,EACAA,aACKC,IAAnBF,EAASjC,OACXkC,EAAQE,KAAK,O,+BAGP,IACAH,EAAaR,KAAKO,MAAlBC,SACFI,EAAOZ,KAAKO,MAAMC,SAASjC,MACjC,OAAIiC,EAASjC,MAET,yBAAKb,UAAU,8BACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,iBACb,yBAAKgB,IAAKkC,EAAK5C,OAAQN,UAAU,KACjC,yBAAKA,UAAU,cACb,yBAAKA,UAAU,sBAAsBkD,EAAK9C,OAC1C,yBAAKJ,UAAU,+BAA+BkD,EAAK/C,MACnD,yBAAKH,UAAU,+BAAf,YACYkD,EAAKzC,SAEjB,yBAAKT,UAAU,+BAAf,WACWkD,EAAKxC,QAEhB,yBAAKV,UAAU,yBAAf,WACA,wBAAIA,UAAU,eACXkD,EAAK3C,OAAOW,KAAI,SAACC,EAAOC,GAAR,OACf,wBAAIC,IAAKD,EAAOpB,UAAU,iBACvBmB,UAOb,yBAAKnB,UAAU,eACb,yBAAKA,UAAU,yBAAf,YACA,yBAAKA,UAAU,IAAIkD,EAAK7C,WAKvB,S,GA3CQqC,IAAMC,W,MCYZQ,MAVf,WAEE,OACE,yBAAKnD,UAAU,OACb,kBAAC,IAAD,CAAMW,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCSSyC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW1B,IACxC,kBAAC,IAAD,CAAOwB,KAAK,SAASE,UAAWxD,IAChC,kBAAC,IAAD,CAAOsD,KAAK,gBAAgBE,UAAWX,MCDzBY,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0839e5c1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./About.css\";\nimport \"../index.css\";\n\nfunction About() {\n  return (\n    <div className=\"flex justify-center items-center h-screen\">\n      <div className=\"font-semibold text-3xl\">Developed by Yung</div>\n    </div>\n  );\n}\n\nexport default About;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nfunction Movie({\n  id,\n  year,\n  title,\n  summary,\n  poster,\n  genres,\n  bg_poster,\n  runtime,\n  rating,\n}) {\n  return (\n    <Link\n      to={{\n        pathname: \"/movie-detail\",\n        state: {\n          id,\n          year,\n          title,\n          summary,\n          poster,\n          genres,\n          bg_poster,\n          runtime,\n          rating,\n        },\n      }}\n      style={{ textDecoration: \"none\" }}\n    >\n      <div className=\"movie\">\n        <img src={poster} alt={title} title={title}></img>\n        <div className=\"movie__date\">\n          <h3 className=\"movie__title\">{title}</h3>\n          <h5 className=\"movie__year\">{year}</h5>\n          <ul className=\"genres\">\n            {genres.map((genre, index) => (\n              <li key={index} className=\"genres__genre\">\n                {genre}\n              </li>\n            ))}\n          </ul>\n          <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\n        </div>\n      </div>\n    </Link>\n  );\n}\n\nMovie.prototypes = {\n  id: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Movie;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"../components/Movie\";\nimport \"./Home.css\";\n\nclass Home extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n\n  getMovies = async () => {\n    const movies = await axios.get(\n      \"https://yts.mx/api/v2/list_movies.json?sort_by=rating\"\n    ); //fetch와 비슷 npm install axios로 설치해야함.\n    this.setState({ movies: movies.data.data.movies, isLoading: false });\n  }; // axios는 때때로 느리기 때문에 async와 await으로 완료될 때까지 대기\n\n  componentDidMount() {\n    this.getMovies();\n  } // jsx이기 때문에 html의 class tag를 헷갈려하므로 className을 쓴다. 실제 HTML 상에서는 class라고 보임.\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"flex justify-center\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map((movie) => {\n              return (\n                <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster={movie.medium_cover_image}\n                  genres={movie.genres}\n                  bg_poster={movie.background_image}\n                  runtime={movie.runtime}\n                  rating={movie.rating}\n                />\n              );\n            })}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default Home;\n\n// 함수의 argument를 가져오는 방법에는 arg.propery 또는 { property } 두 가지가 있다.\n\n// class App extends React.Component {\n//   state = { // state는 수정 불가능이고 object\n//     count: 0\n//   };\n\n//   add = () => {\n//     this.setState({ count: this.state.count + 1 }); // state를 수정하면 render를 새로고침해야되는데 setState가 이를 해결해준다. 그리고 setState는 새로운 state를 받아야 한다. setState는 render를 다시 해준다. state가 바뀌었기 때문\n//   };\n//   minus = () => {\n//     this.setState(current => ({ count: current.count - 1 })); // state를 set 할 때, react에서 외부의 상태에 의존하지 않는 가장 좋은 방법. 위의 방법은 추천하지 않음.\n//   };\n\n//   render() {\n//     return (<div>\n//       <h1>The number is {this.state.count}</h1>\n//       <button onClick={this.add}>Add</button>\n//       <button onClick={this.minus}>Minus</button>\n//     </div>);\n//   }\n// } // class component이기 때문에 return 대신 render 메소드 사용\n// // 중괄호 {} 안은 javascript를 의미\n// export default App;\n","import React from \"react\";\nimport \"../index.css\";\nclass Detail extends React.Component {\n  componentDidMount() {\n    const { location, history } = this.props;\n    if (location.state === undefined) {\n      history.push(\"/\");\n    }\n  }\n  render() {\n    const { location } = this.props;\n    const comp = this.props.location.state;\n    if (location.state) {\n      return (\n        <div className=\"flex flex-col items-center\">\n          <div className=\"mt-12 w-2/3\">\n            <div className=\"flex flex-row\">\n              <img src={comp.poster} className=\"\"></img>\n              <div className=\"ml-10 mt-3\">\n                <div className=\"font-bold text-2xl\">{comp.title}</div>\n                <div className=\"mt-px font-semibold text-lg\">{comp.year}</div>\n                <div className=\"mt-px font-semibold text-lg\">\n                  Runtime: {comp.runtime}\n                </div>\n                <div className=\"mt-px font-semibold text-lg\">\n                  Rating: {comp.rating}\n                </div>\n                <div className=\"font-semibold text-lg\">Genres:</div>\n                <ul className=\"genres ml-5\">\n                  {comp.genres.map((genre, index) => (\n                    <li key={index} className=\"genres__genre\">\n                      {genre}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n          <div className=\"mt-20 w-2/3\">\n            <div className=\"font-semibold text-xl\">Synopsis</div>\n            <div className=\"\">{comp.summary}</div>\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\nexport default Detail;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Navigation.css\";\n\nfunction Navigation() {\n  // Link to는 'a href'와는 다르게 리액트를 죽이고 새로고침하지 않음.\n  return (\n    <div className=\"nav\">\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/about\">About</Link>\n    </div>\n  );\n}\n\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport About from \"./routes/About\";\nimport Home from \"./routes/Home\";\nimport Detail from \"./routes/Detail\";\nimport Navigation from \"./components/Navigation\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie-detail\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}